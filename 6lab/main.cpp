#include "MusicLibrary.h"
#include <iostream>
#include <string>
#include <vector>
#include <iomanip>
#include <Windows.h>

int main() {
    SetConsoleCP(1251);
    setlocale(LC_ALL, "rus");

    //Создание библиотеки
    MusicLibrary myMusicLibrary(1, 1);

    //Создание плейлиста
    Playlist myPlaylist("Любимые треки", 3, 2);

    Favorites favorites("Избранное", 3, 1);

    //Вектор с треками для плейлиста
    std::vector<Track> tracks = {
    {"Кукушка", "Виктор Цой", 400, 1986, "рок"},
    {"Метель", "Би-2", 345, 1998, "рок"},
    {"Лето в городе", "Иван Дорн", 328, 2012, "поп"}
    };
    
    favorites.AddTrack(tracks[0]);
    
    favorites.CallBaseAddTrack(tracks[1]);
    favorites.PrintTracks();

    //Заполнение вектора tracks внутри класса Playlist
    myPlaylist.SetTracks(tracks);

    //Работа с динамической память
    //Выделяю память для массива указателей на объекты класса Album
    Album** albumsArray = new Album * [2];

    //Первый альбом для плейлиста
    Album* album1 = new Album("Несчастные люди", "ЛСП", 2023, 12, {});
    std::vector<Track> tracks1 = {
        {"Карантин", "ЛСП", 180, 2023, "поп хип-хоп"},
        {"Троянский конь", "ЛСП", 200, 2023, "поп хип-хоп"},
        {"Монополия", "ЛСП", 198, 2023, "поп хип-хоп"},
        {"Золотой ключик", "ЛСП", 222, 2023, "поп хип-хоп"},
        {"Несчастные люди", "ЛСП", 210, 2023, "поп хип-хоп"},
        {"Вечная весна", "ЛСП", 195, 2023, "поп хип-хоп"},
        {"Ураганы", "ЛСП", 189, 2023, "поп хип-хоп"},
        {"Не убежал", "ЛСП", 240, 2023, "поп хип-хоп"},
        {"Боди", "ЛСП", 200, 2023, "поп хип-хоп"},
        {"Сектор Приз", "ЛСП", 192, 2023, "поп хип-хоп"},
        {"Сикрет Плейс", "ЛСП", 203, 2023, "поп хип-хоп"},
        {"Стоп Игра", "ЛСП", 240, 2023, "поп хип-хоп"}
    };

    std::cout << tracks1[9];

    album1->SetTracks(tracks1);

    //Второй альбом для плейлиста
    Album* album2 = new Album("Дух мира", "Джизус", 2023, 13, {});
    std::vector<Track> tracks2 = {
         {"Я голоден", "Джизус", 171, 2023, "альтернатива"},
        {"Едкий дым", "Джизус", 224, 2023, "альтернатива"},
        {"Маньяк", "Джизус", 161, 2023, "альтернатива"},
        {"Галактика", "Джизус", 330, 2023, "альтернатива"},
        {"Всё забрать", "Джизус", 239, 2023, "альтернатива"},
        {"Плавишься", "Джизус", 167, 2023, "альтернатива"},
        {"Ждал тебя", "Джизус", 225, 2023, "альтернатива"},
        {"Рай или Ад", "Джизус", 258, 2023, "альтернатива"},
        {"Spirit of the World", "Джизус", 217, 2023, "альтернатива"},
        {"Жвачка", "Джизус", 266, 2023, "альтернатива"},
        {"Заповедь", "Джизус", 100, 2023, "альтернатива"},
        {"Сигареты и творчество", "Джизус", 155, 2023, "альтернатива"},
        {"Каплей дождя", "Джизус", 238, 2023, "альтернатива"}
    };
    album2->SetTracks(tracks2);

    //Заполняем массив указателей на альбомы
    albumsArray[0] = album1;
    albumsArray[1] = album2;

    //Создаем вектор albums, который будет содержать копии объектов Album
    std::vector<Album> albums;
    for (int i = 0; i < 2; i++) {
        // Добавляем копии альбомов в вектор
        albums.push_back(*albumsArray[i]);
    }

    //Заполняем плейлист альбомами
    myPlaylist.SetAlbums(albums);

    //Первый альбом для артиста и вектор треков для него
    Album albumLsp1("Magic City", "ЛСП", 2015, 9, {});
    std::vector<Track> tracksLsp1 =
    { {"Bullet", "ЛСП", 130, 2015, "рэп"},
    {"Что-то ещё", "ЛСП", 423, 2015, "рэп"},
    {"Шест", "ЛСП", 412, 2015, "рэп"},
    {"Безумие", "ЛСП", 258, 2015, "рэп"},
    {"Синее", "ЛСП", 258, 2015, "рэп"},
    {"Фокус", "ЛСП", 258, 2015, "рэп"},
    {"Бигги", "ЛСП", 258, 2015, "рэп"},
    {"ОК", "ЛСП", 258, 2015, "рэп"},
    {"Уровни", "ЛСП", 258, 2015, "рэп"} };
    //Заполнение альбома треками
    albumLsp1.SetTracks(tracksLsp1);

    //Второй альбом и вектор треков для него
    Album albumLsp2("Tragic City", "ЛСП", 2017, 10, {});
    std::vector<Track> tracksLsp2  =
    { {"Воскресение", "ЛСП", 130, 2015, "рэп"},
    {"Монетка", "ЛСП", 423, 2015, "рэп"},
    {"Тело", "ЛСП", 412, 2015, "рэп"},
    {"Лабиринт отражений", "ЛСП", 258, 2015, "рэп"},
    {"Конец света", "ЛСП", 258, 2015, "рэп"},
    {"Белый танец", "ЛСП", 258, 2015, "рэп"},
    {"Ещё один день", "ЛСП", 258, 2015, "рэп"},
    {"Канкан", "ЛСП", 258, 2015, "рэп"},
    {"Ползать", "ЛСП", 258, 2015, "рэп"},
    {"Деньги не проблема", "ЛСП", 258, 2015, "рэп"}};
    //Заполнение альбома треками
    albumLsp2.SetTracks(tracksLsp2);

    //Создаю вектор альбомов, который содержит созданные альбомы
    std::vector<Album> albumsLsp = { albumLsp1,albumLsp2 };

    //Выделяю память для Artist
    Artist* myArtist = new Artist("ЛСП", 2);

    //Обращаюсь к методу объекта через '->' (Заполнение артиста альбомами)
    myArtist->SetAlbums(albumsLsp);

    //Добавляю созданный плейлист в музыкальную библиотеку
    myMusicLibrary.AddPlaylist(myPlaylist);

    //Создаю новый объект myPlaylist, полученный из дружественной функции GetPlaylist
    myPlaylist = GetPlaylist(myMusicLibrary, 0);

    std::vector<LibraryItem*> library;
    library.push_back(&tracks[0]);
    library.push_back(&tracks[2]);
    library.push_back(album1);

    for (const auto& item : library) {
        item->DisplayInfo();
    }

    std::cout << "Вывод треков из плейлиста\n" << std::endl;
    //Вывод треков из плейлиста
    myPlaylist.PrintTracks();
    //Удаление трека на выбор
    myPlaylist.DeleteTrack();
    //Вывод треков
    myPlaylist.PrintTracks();

    //Аналогично, как с треками
    std::cout << "\nВывод альбомов из плейлиста\n" << std::endl;
    myPlaylist.PrintAlbums();
    std::cout << "\nУдаление альбома из плейлиста\n" << std::endl;
    myPlaylist.DeleteAlbum();
    std::cout << "\nВывод альбомов из плейлиста\n" << std::endl;
    myPlaylist.PrintAlbums();

    favorites = myPlaylist;

    myPlaylist.CallVirtualDeleteTrack(favorites);

    favorites.PrintTracks();

    Playlist* ptr = nullptr;
    ptr = &favorites;
    ptr->DeleteTrack();
    favorites.PrintTracks();

    //Добавление исполнителя в музыкальную библиотеку
    myMusicLibrary.AddArtist(*myArtist);

    //Создаю новый объект myArtist, полученный из метода GetArtist
    myArtist = myMusicLibrary.GetArtist(0);
    std::cout << "\nВывод альбомов артиста\n" << std::endl;
    myArtist->PrintAlbums();
    std::cout << "\nУдаление альбома артиста\n" << std::endl;
    myArtist->DeleteAlbum();
    std::cout << "\nВывод альбомов артиста\n" << std::endl;
    myArtist->PrintAlbums();

    //Освобождение памяти, выделенной для объектов альбомов
    for (int i = 0; i < 2; i++) {
        delete albumsArray[i];
    }
    //Освобождение памяти, выделенной для массива указателей на альбомы
    delete[] albumsArray;

    return 0;
}